--PARTIE 2 : DML
--2. Donner les commandes SQL permettant d'avoir les informations suivantes :
2.1.Le(s) moniteur(s) qui a(/ont) le plus d'heures de leçons
SELECT m.m_id, m.m_nom, m.m_prenom, SUM(l.l_duree) AS total_heures_lecon
FROM moniteur m
JOIN lecon l ON m.m_id = l.m_id
GROUP BY m.m_id, m.m_nom, m.m_prenom
HAVING SUM(l.l_duree) = (SELECT MAX(total_heures) FROM 
                        (SELECT SUM(l_duree) AS total_heures 
                         FROM lecon 
                         GROUP BY m_id));

2.2. Les moniteurs avec leur nombre d'heures de leçons.
SELECT m.m_id, m.m_nom, m.m_prenom, SUM(l.l_duree) AS total_heures_lecon
FROM moniteur m
JOIN lecon l ON m.m_id = l.m_id
GROUP BY m.m_id, m.m_nom, m.m_prenom;


2.3. Le(s) moniteur(s) qui a(/ont) le moins d'heures de leçons
SELECT m.m_id, m.m_nom, m.m_prenom, SUM(l.l_duree) AS total_heures_lecon
FROM moniteur m
JOIN lecon l ON m.m_id = l.m_id
GROUP BY m.m_id, m.m_nom, m.m_prenom
HAVING SUM(l.l_duree) = (SELECT MIN(total_heures) FROM 
                        (SELECT SUM(l_duree) AS total_heures 
                         FROM lecon 
                         GROUP BY m_id));

2.4.Les élèves avec le nombre de kilomètres parcourus par type de voie, et le nombre total de kilomètres parcourus.
SELECT e.e_id, e.e_nom, e.e_prenom, t.t_type, SUM(t.t_nb_km) AS total_km_parcourus
FROM eleve e
JOIN trajet t ON e.e_id = t.e_id
GROUP BY e.e_id, e.e_nom, e.e_prenom, t.t_type WITH ROLLUP;

2.5. Les élèves qui ont déjà passé le permis (en l'ayant raté) mais pas depuis 1 an.
SELECT e.e_id, e.e_nom, e.e_prenom
FROM eleve e
JOIN inscription i ON e.e_id = i.e_id
WHERE i.i_resultat = 'Échoué'
  AND i.i_date_examen > SYSDATE - INTERVAL '1' YEAR;

2.6. Les élèves qui n''ont pas passé l'examen depuis 1 an, ou qui n''ont jamais passé l''examen mais sont inscrits depuis 
au moins 1 an. 
SELECT e.e_id, e.e_nom, e.e_prenom
FROM eleve e
LEFT JOIN inscription i ON e.e_id = i.e_id
WHERE (i.i_date_examen IS NULL AND e.e_date_dossier <= SYSDATE - INTERVAL '1' YEAR)
   OR (i.i_date_examen IS NOT NULL AND i.i_date_examen <= SYSDATE - INTERVAL '1' YEAR);

2.7.D’augmenter de 10% le salaire des moniteurs.
UPDATE moniteur
SET salaire = salaire * 1.10;

2.8.De diminuer de 1500 le salaire du moniteur le plus payé
UPDATE moniteur
SET salaire = salaire - 1500
WHERE salaire = (SELECT MAX(salaire) FROM moniteur);

2.9.De supprimer les élèves plus âgés que 50 ans.
DELETE FROM eleve
WHERE EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM e_date_naiss) > 50;
